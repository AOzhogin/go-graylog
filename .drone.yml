---
kind: pipeline
name: durl
steps:
- name: durl
  image: quay.io/suzuki_shunsuke/durl:1.0.0
  commands:
  - sh scripts/durl.sh
---
kind: pipeline
name: build
volumes:
- name: gopath
  temp: {}
steps:
- name: download go modules
  image: &image_go golang:1.13.0
  commands:
  - go mod download
  volumes: &volumes
  - name: gopath
    path: /go
  environment:
    GOPATH: /go
- name: golangci-lint
  image: golangci/golangci-lint:v1.17.1
  commands:
  - golangci-lint run
  volumes: *volumes
  environment:
    GOPATH: /go
- name: codecov
  image: *image_go
  commands:
  # bash and cgo seem to be required
  - bash scripts/codecov-test.sh
  - curl -s https://codecov.io/bash > /tmp/codecov.sh
  - test "$LOCAL" = "true" -o "$DRONE_BUILD_EVENT" = "pull_request" || bash /tmp/codecov.sh
  volumes: *volumes
  environment:
    GOPATH: /go
    CODECOV_TOKEN:
      from_secret: codecov_token
- name: build
  image: &image_gox suzukishunsuke/gox:1.0.1__0.2.0
  commands:
  - gox -output="dist/${DRONE_TAG}/terraform-provider-graylog_${DRONE_TAG}_{{.OS}}_{{.Arch}}" -osarch="darwin/amd64 linux/amd64 windows/amd64" ./terraform/
  - ls dist/${DRONE_TAG} | xargs -I {} gzip dist/${DRONE_TAG}/{}
  volumes: *volumes
  environment:
    CGO_ENABLED: "0"
    GOPATH: /go
  when:
    event:
    - tag
- name: build test
  image: *image_gox
  commands:
  - gox -output="dist/v0.1.0/terraform-provider-graylog_v0.1.0_{{.OS}}_{{.Arch}}" -osarch="darwin/amd64 linux/amd64 windows/amd64" ./terraform/
  - ls dist/v0.1.0 | xargs -I {} gzip dist/v0.1.0/{}
  volumes: *volumes
  environment:
    CGO_ENABLED: "0"
    GOPATH: /go
  when:
    event:
    - push
    - pull_request
- name: release
  image: suzukishunsuke/ghr
  commands:
  - ghr -u suzuki-shunsuke -r go-graylog ${DRONE_TAG} dist/${DRONE_TAG}
  environment:
    GITHUB_TOKEN:
      from_secret: github_token
  when:
    event:
    - tag
